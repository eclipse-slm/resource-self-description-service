### Application
application:
  name: "^project.artifactId^"
  version: "^project.version^"
  timestamp: "^timestamp^"

### Deployment
deployment:
  scheme: "http"
  hostname: "localhost"
  port: ${server.port}
  path: ""
  url: ${deployment.scheme}://${deployment.hostname}:${deployment.port}${deployment.path}

### Server / API
server:
  port: 8081
  error:
    include-message: always
  ssl:
    enabled: true
    key-store-type: PEM
    certificate: file:./certs/${resource.id}.crt
    certificate-private-key: file:./certs/${resource.id}.key

open-api:
  title: Self Description Service
  description: REST API of Self Description Service
  version: "^project.version^"
  contact:
    name: Fraunhofer IPA
    url: https://www.ipa.fraunhofer.de
    email: matthias.schneider@ipa.fraunhofer.de

springdoc:
  swagger-ui:
    disable-swagger-default-url: true
    tags-sorter: alpha
    operations-sorter: alpha
    oauth:
      clientId: ui
      clientSecret: unused-and-not-required

### Spring
spring:
  application:
    name: self_description_service
  main:
    allow-bean-definition-overriding: true
  config:
    import: "consul:"
  cloud:
    consul:
      host: ${consul.host}
      port: ${consul.port}
      discovery:
        enabled: true
        hostname: ${deployment.hostname}
        port: ${deployment.port}
        acl-token: ${consul.acl-token}
        register-health-check: true
        tags: slm, backend, ${spring.application.name}
        service-name: ${spring.application.name}
        metadata:
          version: ${application.version}
      config:
        enabled: true
        fail-fast: true
        profileSeparator: '::'
        format: YAML
        acl-token: ${consul.acl-token}
  security:
    user:
      name: "user"
      password: "password"

management:
  endpoints:
    web.exposure.include: health,info
  info:
    git.enabled: false


### Security
security:
  enabled: true
  auth-white-list: ""
  origins: "*"

### Keycloak
keycloak:
  tenants:
#    config-path: "../../src/main/resources/static/test-keycloak.json"
    config-path: consul:keycloak
    kv-name: 'resource_self_description_services'
    realm: 'fabos'
    auth-server-url: 'http://keycloak:7080/auth/'


resource:
  aas:
    prefix: "Resource_"
    id: ${resource.aas.prefix}${resource.id}
  id: "00000000-0000-0000-0000-000000000000"
  use-config-urls: true

aas:
  broker:
    host: localhost
    port: 1884
  aas-registry:
    scheme: http
    host: aas-registry
    port: 8082
    path: /aas/shell-registry
    url: ${aas.aas-registry.scheme}://${aas.aas-registry.host}:${aas.aas-registry.port}${aas.aas-registry.path}
  aas-repository:
    scheme: http
    host: aas-repository
    port: 8081
    path: /aas/environment
    url: ${aas.aas-repository.scheme}://${aas.aas-repository.host}:${aas.aas-repository.port}${aas.aas-repository.path}
  submodel-registry:
    scheme: http
    host: submodel-registry
    port: 8083
    path: /aas/submodel-registry
    url: ${aas.submodel-registry.scheme}://${aas.submodel-registry.host}:${aas.submodel-registry.port}${aas.submodel-registry.path}

  concept-descriptions-repository:
    scheme: http
    host: localhost
    port: 8081
    path:
    url: ${aas.concept-descriptions-repository.scheme}://${aas.concept-descriptions-repository.host}:${aas.concept-descriptions-repository.port}${aas.concept-descriptions-repository.path}

  submodel-repository:
    scheme: http
    host: submodel-repository
    port: 8081
    path: /aas/environment
    url: ${aas.submodel-repository.scheme}://${aas.submodel-repository.host}:${aas.submodel-repository.port}${aas.submodel-repository.path}

### Consul
consul:
  scheme: http
  host: consul
  port: 8500
  datacenter: fabos
  acl-token: password

### Datasources
datasources:
  docker:
    enabled: true
    docker-host: "tcp://localhost:2375"